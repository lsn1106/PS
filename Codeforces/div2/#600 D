#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
using namespace std;
typedef pair<int, int> P;
const int MAX = 2e5 + 2;
 
int uf[MAX];
int find(int a) {
	if (uf[a] == -1) return a;
	return uf[a] = find(uf[a]);
}
 
bool merge(int a, int b) {
	a = find(a);
	b = find(b);
	if (a == b) return false;
	uf[a] = b;
	return true;
}
 
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
 
	int n, m; cin >> n >> m;
	fill(uf, uf + MAX, -1);
	P e[MAX];
	vector<P> can;
	for (int i = 0, u, v; i < m; i++) {
		cin >> u >> v;
		if (u > v) swap(u, v);
		merge(u, v);
		e[i] = { u,v };
	}
 
	sort(e, e + m);
 
	int st = e[0].first, en = e[0].second;
	for (int i = 1; i < m; i++) {
		int l = e[i].first, r = e[i].second;
		if (en < l) {
			can.push_back({ st,en });
			st = l, en = r;
		}
		else if (en < r) en = r;
	}
	can.push_back({ st,en });
 
	for (int i = 1; i <= n; i++) find(i);
 
	int ans = 0;
	for (int i = 0; i < can.size(); i++) {
		int l = can[i].first, r = can[i].second;
		for (int j = l + 1; j <= r; j++) {
			if (merge(l, j)) {
				ans++;
			}
		}
	}
	cout << ans << '\n';
}
